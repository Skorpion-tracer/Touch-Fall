//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Input/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TouchFall.Input
{
    public partial class @PlayerControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""f2b43de9-b37b-47d0-afd3-4d49ff4d7483"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f80011f8-0ca3-4a57-ba25-3e8b8cca49aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""81e2bb21-364d-4e79-be36-efa8a1391e66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""279650cb-c077-43e3-85c9-8b601d2f77e3"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b0655d-def3-406c-8b35-9ea550b775c6"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Click"",
            ""id"": ""78b1d5fd-0088-40ce-8473-842f634b3e9a"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""679d6c63-89d1-4a09-a470-a1da91dd63cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""91adee1a-dde6-4e34-9adb-aca728e54062"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b4e71b8a-65b3-4c0e-b57c-840fcc966dfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d90b7c39-1388-4150-a07a-54acad0760b6"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseScheme"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40def37a-225f-4e44-88e3-0ce7ed5c33c9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseScheme"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eeda58a-c670-4e7f-8a24-da98ac343d2f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseScheme"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TouchScheme"",
            ""bindingGroup"": ""TouchScheme"",
            ""devices"": []
        },
        {
            ""name"": ""MouseScheme"",
            ""bindingGroup"": ""MouseScheme"",
            ""devices"": []
        }
    ]
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_PrimaryContact = m_Touch.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Touch_PrimaryPosition = m_Touch.FindAction("PrimaryPosition", throwIfNotFound: true);
            // Click
            m_Click = asset.FindActionMap("Click", throwIfNotFound: true);
            m_Click_PrimaryContact = m_Click.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Click_PrimaryPosition = m_Click.FindAction("PrimaryPosition", throwIfNotFound: true);
            m_Click_Pause = m_Click.FindAction("Pause", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
        private readonly InputAction m_Touch_PrimaryContact;
        private readonly InputAction m_Touch_PrimaryPosition;
        public struct TouchActions
        {
            private @PlayerControl m_Wrapper;
            public TouchActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryContact => m_Wrapper.m_Touch_PrimaryContact;
            public InputAction @PrimaryPosition => m_Wrapper.m_Touch_PrimaryPosition;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void AddCallbacks(ITouchActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            }

            private void UnregisterCallbacks(ITouchActions instance)
            {
                @PrimaryContact.started -= instance.OnPrimaryContact;
                @PrimaryContact.performed -= instance.OnPrimaryContact;
                @PrimaryContact.canceled -= instance.OnPrimaryContact;
                @PrimaryPosition.started -= instance.OnPrimaryPosition;
                @PrimaryPosition.performed -= instance.OnPrimaryPosition;
                @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
            }

            public void RemoveCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchActions @Touch => new TouchActions(this);

        // Click
        private readonly InputActionMap m_Click;
        private List<IClickActions> m_ClickActionsCallbackInterfaces = new List<IClickActions>();
        private readonly InputAction m_Click_PrimaryContact;
        private readonly InputAction m_Click_PrimaryPosition;
        private readonly InputAction m_Click_Pause;
        public struct ClickActions
        {
            private @PlayerControl m_Wrapper;
            public ClickActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryContact => m_Wrapper.m_Click_PrimaryContact;
            public InputAction @PrimaryPosition => m_Wrapper.m_Click_PrimaryPosition;
            public InputAction @Pause => m_Wrapper.m_Click_Pause;
            public InputActionMap Get() { return m_Wrapper.m_Click; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ClickActions set) { return set.Get(); }
            public void AddCallbacks(IClickActions instance)
            {
                if (instance == null || m_Wrapper.m_ClickActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ClickActionsCallbackInterfaces.Add(instance);
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(IClickActions instance)
            {
                @PrimaryContact.started -= instance.OnPrimaryContact;
                @PrimaryContact.performed -= instance.OnPrimaryContact;
                @PrimaryContact.canceled -= instance.OnPrimaryContact;
                @PrimaryPosition.started -= instance.OnPrimaryPosition;
                @PrimaryPosition.performed -= instance.OnPrimaryPosition;
                @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(IClickActions instance)
            {
                if (m_Wrapper.m_ClickActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IClickActions instance)
            {
                foreach (var item in m_Wrapper.m_ClickActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ClickActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ClickActions @Click => new ClickActions(this);
        private int m_TouchSchemeSchemeIndex = -1;
        public InputControlScheme TouchSchemeScheme
        {
            get
            {
                if (m_TouchSchemeSchemeIndex == -1) m_TouchSchemeSchemeIndex = asset.FindControlSchemeIndex("TouchScheme");
                return asset.controlSchemes[m_TouchSchemeSchemeIndex];
            }
        }
        private int m_MouseSchemeSchemeIndex = -1;
        public InputControlScheme MouseSchemeScheme
        {
            get
            {
                if (m_MouseSchemeSchemeIndex == -1) m_MouseSchemeSchemeIndex = asset.FindControlSchemeIndex("MouseScheme");
                return asset.controlSchemes[m_MouseSchemeSchemeIndex];
            }
        }
        public interface ITouchActions
        {
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
        }
        public interface IClickActions
        {
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
        }
    }
}
